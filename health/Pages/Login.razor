@page "/login"
@inject HttpClient http;
@inject NavigationManager navigationManager;
@inject IJSRuntime jsRuntime;

<h1 class="text-center">Авторизация</h1>
<div class="row">
    <div class="col">
        <form class="mt-3" @onsubmit="LoginUser">
            @if (msg!=string.Empty)
            {
                <div class="alert alert-danger">@msg</div>
            }
            <div class="mb-3">
                <label for="login" class="form-label">Логин</label>
                <input @bind-value="login" type="text" name="Login" class="form-control" id="login">
            </div>
            <div class="mb-3">
                <label for="password" class="form-label">Пароль</label>
                <input type="password" @bind-value="password" name="Password" class="form-control" id="password">
            </div>
            <button type="submit" class="btn btn-primary">Войти</button>
        </form>
    </div>
</div>

@code{
    string login;
    string password;
    string msg = string.Empty;    
    async Task LoginUser()
    {
        var postBody = new { Login = login, Password = password };
        var serialized = JsonConvert.SerializeObject(postBody);
        var stringContent = new StringContent(serialized, Encoding.UTF8, "application/json");
        var result = await http.PostAsync($"{navigationManager.BaseUri}api/account/login", stringContent).ConfigureAwait(false);
        var success = result.Headers.TryGetValues("Set-Cookie", out var setCookie);
        if (success)
        {
            var setCookieString = setCookie.Single();
            var cookieTokens = setCookieString.Split(';');
            var firstCookie = cookieTokens.FirstOrDefault();
            await jsRuntime.InvokeAsync<string>("addCookie", firstCookie);

            navigationManager.NavigateTo("/", true);
        }
        else
        {
            msg = "Ошибка авторизации, попробуйте еще раз";
        }
        Console.WriteLine($"result: {result.ToString()}");
    }
}