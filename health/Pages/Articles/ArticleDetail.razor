@page "/articles/{IdName}"
@inject IHeadElementHelper HeadElementHelper
@using static Toolbelt.Blazor.HeadElement.MetaElement

@inject NavigationManager NavigationManager

@inject Data.SiteContext db
@inject IOptions<health.Options.ConnectionStringOptions> connection

@if (model == null)
{
    <PageLoader />
}
else
{
    <Breadcrumb Data="_crumb"></Breadcrumb>

    <AuthorizeView>
        <Authorized>
            <health.Areas.Admin.Components.AdminZone.ArticleAdminZone @ref="_adminZone" OnChange="()=>ArticleChangeListEvent()" />
            <div class="admin-h1">
                <health.Areas.Admin.Components.AdminZone.AdminIcons ItemId="@model.ArticleId" IconSet="edit,remove" OnDelete="(()=>_adminZone.DeleteClickEvent(model.ArticleId))" OnEdit="(()=>_adminZone.EditClickEvent(model.ArticleId))" />
                <h1>@model.Name</h1>
            </div>
        </Authorized>
        <NotAuthorized>
            <h1>@model.Name</h1>
        </NotAuthorized>
    </AuthorizeView>
    @((MarkupString)model.Content)
}

@code {
    [Parameter] public string IdName { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    bool isAdmin = false;
    Article model;
    health.Models.Repository.ArticleRepository rep;
    health.Models.Repository.PageInfoRepository pirep;
    health.HelperClasses.Crumb _crumb;
    string _url = Constants.URL_ARTICLE;

    health.Areas.Admin.Components.AdminZone.ArticleAdminZone _adminZone;


    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationStateTask;
        _adminZone = new Areas.Admin.Components.AdminZone.ArticleAdminZone();
        var user = authState.User;
        if (user.Identity.IsAuthenticated)
        {
            isAdmin = true;
        }
        rep = new Models.Repository.ArticleRepository(db, connection);
        pirep = new health.Models.Repository.PageInfoRepository(db, connection);
        await UpdateModel();
    }

    async Task UpdateModel()
    {
        model = await rep.FindAsync(IdName);
        if (model == null)
            NavigationManager.NavigateTo("/404");
        
        var pi = await pirep.FindAsync(_url);

        if (pi == null)
            pi = new PageInfo(_url);

        _crumb = new HelperClasses.Crumb();
        _crumb.List.Add(_url, pi.Name);
        _crumb.List.Add("", model.Name);

        await HeadElementHelper.SetTitleAsync(model.Title);
        await HeadElementHelper.SetMetaElementsAsync(
          ByName("description", model.Description ?? "")
        );
    }

    async Task ArticleChangeListEvent()
    {
        await UpdateModel();
    }
}
